// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Fixed period utilities Period id parser should parse bi-weekly periods correctly 1`] = `
Object {
  "displayName": "Bi-Week 9 - 2014-04-21 - 2014-05-04",
  "endDate": "2014-05-04",
  "id": "2014BiW9",
  "iso": "2014BiW9",
  "periodType": Object {
    "displayName": "Bi-weekly",
    "getPeriods": [Function],
    "regex": /\\^\\(\\[0-9\\]\\{4\\}\\)BiW\\(\\[0-9\\]\\{1,2\\}\\)\\$/,
    "type": "BiWeekly",
  },
  "startDate": "2014-04-21",
  "year": 2014,
}
`;

exports[`Fixed period utilities Period id parser should parse bimonthly periods correctly 1`] = `
Object {
  "displayName": "November - December 2014",
  "endDate": "2014-12-31",
  "id": "201406B",
  "iso": "201406B",
  "periodType": Object {
    "displayName": "Bi-monthly",
    "getPeriods": [Function],
    "regex": /\\^\\(\\[0-9\\]\\{4\\}\\)\\(\\[0-9\\]\\{2\\}\\)B\\$/,
    "type": "BiMonthly",
  },
  "startDate": "2014-11-01",
  "year": 2014,
}
`;

exports[`Fixed period utilities Period id parser should parse daily periods correctly 1`] = `
Object {
  "displayName": "2014-01-01",
  "endDate": "2014-01-01",
  "id": "20140101",
  "iso": "20140101",
  "periodType": Object {
    "displayName": "Daily",
    "getPeriods": [Function],
    "regex": /\\^\\(\\[0-9\\]\\{4\\}\\)\\(\\[0-9\\]\\{2\\}\\)\\(\\[0-9\\]\\{2\\}\\)\\$/,
    "type": "Daily",
  },
  "startDate": "2014-01-01",
  "year": 2014,
}
`;

exports[`Fixed period utilities Period id parser should parse financial-year-april periods correctly 1`] = `
Object {
  "displayName": "April 2014 - March 2015",
  "endDate": "2015-03-31",
  "id": "2014April",
  "periodType": Object {
    "displayName": "Financial year (Start April)",
    "getPeriods": [Function],
    "regex": /\\^\\(\\[0-9\\]\\{4\\}\\)April\\$/,
    "type": "FinancialApril",
  },
  "startDate": "2014-04-01",
  "year": 2014,
}
`;

exports[`Fixed period utilities Period id parser should parse financial-year-july periods correctly 1`] = `
Object {
  "displayName": "July 2014 - June 2015",
  "endDate": "2015-06-30",
  "id": "2014July",
  "periodType": Object {
    "displayName": "Financial year (Start July)",
    "getPeriods": [Function],
    "regex": /\\^\\(\\[0-9\\]\\{4\\}\\)July\\$/,
    "type": "FinancialJuly",
  },
  "startDate": "2014-07-01",
  "year": 2014,
}
`;

exports[`Fixed period utilities Period id parser should parse financial-year-november periods correctly 1`] = `
Object {
  "displayName": "November 2014 - October 2015",
  "endDate": "2015-10-31",
  "id": "2014Nov",
  "periodType": Object {
    "displayName": "Financial year (Start November)",
    "getPeriods": [Function],
    "regex": /\\^\\(\\[0-9\\]\\{4\\}\\)Nov\\$/,
    "type": "FinancialNov",
  },
  "startDate": "2014-11-01",
  "year": 2014,
}
`;

exports[`Fixed period utilities Period id parser should parse financial-year-october periods correctly 1`] = `
Object {
  "displayName": "October 2014 - September 2015",
  "endDate": "2015-09-30",
  "id": "2014Oct",
  "periodType": Object {
    "displayName": "Financial year (Start October)",
    "getPeriods": [Function],
    "regex": /\\^\\(\\[0-9\\]\\{4\\}\\)Oct\\$/,
    "type": "FinancialOct",
  },
  "startDate": "2014-10-01",
  "year": 2014,
}
`;

exports[`Fixed period utilities Period id parser should parse monthly periods correctly 1`] = `
Object {
  "displayName": "June 2014",
  "endDate": "2014-06-30",
  "id": "201406",
  "iso": "201406",
  "periodType": Object {
    "displayName": "Monthly",
    "getPeriods": [Function],
    "regex": /\\^\\(\\[0-9\\]\\{4\\}\\)\\(\\[0-9\\]\\{2\\}\\)\\$/,
    "type": "Monthly",
  },
  "startDate": "2014-06-01",
  "year": 2014,
}
`;

exports[`Fixed period utilities Period id parser should parse quarterly periods correctly 1`] = `
Object {
  "displayName": "January - March 2014",
  "endDate": "2014-03-31",
  "id": "2014Q1",
  "iso": "2014Q1",
  "periodType": Object {
    "displayName": "Quarterly",
    "getPeriods": [Function],
    "regex": /\\^\\(\\[0-9\\]\\{4\\}\\)Q\\(\\[1234\\]\\)\\$/,
    "type": "Quarterly",
  },
  "startDate": "2014-01-01",
  "year": 2014,
}
`;

exports[`Fixed period utilities Period id parser should parse six-monthly periods correctly 1`] = `
Object {
  "displayName": "January - June 2014",
  "endDate": "2014-06-30",
  "id": "2014S1",
  "iso": "2014S1",
  "periodType": Object {
    "displayName": "Six-monthly",
    "getPeriods": [Function],
    "regex": /\\^\\(\\[0-9\\]\\{4\\}\\)S\\(\\[12\\]\\)\\$/,
    "type": "SixMonthly",
  },
  "startDate": "2014-01-01",
  "year": 2014,
}
`;

exports[`Fixed period utilities Period id parser should parse six-monthly-april periods correctly 1`] = `
Object {
  "displayName": "April - September 2014",
  "endDate": "2014-09-30",
  "id": "2014AprilS1",
  "iso": "2014AprilS1",
  "periodType": Object {
    "displayName": "Six-monthly April",
    "getPeriods": [Function],
    "regex": /\\^\\(\\[0-9\\]\\{4\\}\\)AprilS\\(\\[12\\]\\)\\$/,
    "type": "SixMonthlyApril",
  },
  "startDate": "2014-04-01",
  "year": 2014,
}
`;

exports[`Fixed period utilities Period id parser should parse weekly periods correctly 1`] = `
Object {
  "displayName": "Week 9 - 2014-02-24 - 2014-03-02",
  "endDate": "2014-03-02",
  "id": "2014W9",
  "iso": "2014W9",
  "periodType": Object {
    "displayName": "Weekly",
    "getPeriods": [Function],
    "regex": /\\^\\(\\[0-9\\]\\{4\\}\\)\\(\\)W\\(\\[0-9\\]\\{1,2\\}\\)\\$/,
    "type": "Weekly",
  },
  "startDate": "2014-02-24",
  "year": 2014,
}
`;

exports[`Fixed period utilities Period id parser should parse weekly-saturday periods correctly 1`] = `
Object {
  "displayName": "Week 9 - 2014-03-01 - 2014-03-07",
  "endDate": "2014-03-07",
  "id": "2014SatW9",
  "iso": "2014SatW9",
  "periodType": Object {
    "displayName": "Weekly (Start Saturday)",
    "getPeriods": [Function],
    "regex": /\\^\\(\\[0-9\\]\\{4\\}\\)\\(Sat\\)W\\(\\[0-9\\]\\{1,2\\}\\)\\$/,
    "type": "WeeklySaturday",
  },
  "startDate": "2014-03-01",
  "year": 2014,
}
`;

exports[`Fixed period utilities Period id parser should parse weekly-sunday periods correctly 1`] = `
Object {
  "displayName": "Week 9 - 2014-02-23 - 2014-03-01",
  "endDate": "2014-03-01",
  "id": "2014SunW9",
  "iso": "2014SunW9",
  "periodType": Object {
    "displayName": "Weekly (Start Sunday)",
    "getPeriods": [Function],
    "regex": /\\^\\(\\[0-9\\]\\{4\\}\\)\\(Sun\\)W\\(\\[0-9\\]\\{1,2\\}\\)\\$/,
    "type": "WeeklySunday",
  },
  "startDate": "2014-02-23",
  "year": 2014,
}
`;

exports[`Fixed period utilities Period id parser should parse weekly-sunday periods correctly 2`] = `
Object {
  "displayName": "Week 9 - 2014-02-23 - 2014-03-01",
  "endDate": "2014-03-01",
  "id": "2014SunW9",
  "iso": "2014SunW9",
  "periodType": Object {
    "displayName": "Weekly (Start Sunday)",
    "getPeriods": [Function],
    "regex": /\\^\\(\\[0-9\\]\\{4\\}\\)\\(Sun\\)W\\(\\[0-9\\]\\{1,2\\}\\)\\$/,
    "type": "WeeklySunday",
  },
  "startDate": "2014-02-23",
  "year": 2014,
}
`;

exports[`Fixed period utilities Period id parser should parse weekly-thursday periods correctly 1`] = `
Object {
  "displayName": "Week 9 - 2014-02-27 - 2014-03-05",
  "endDate": "2014-03-05",
  "id": "2014ThuW9",
  "iso": "2014ThuW9",
  "periodType": Object {
    "displayName": "Weekly (Start Thursday)",
    "getPeriods": [Function],
    "regex": /\\^\\(\\[0-9\\]\\{4\\}\\)\\(Thu\\)W\\(\\[0-9\\]\\{1,2\\}\\)\\$/,
    "type": "WeeklyThursday",
  },
  "startDate": "2014-02-27",
  "year": 2014,
}
`;

exports[`Fixed period utilities Period id parser should parse weekly-wednessday periods correctly 1`] = `
Object {
  "displayName": "Week 9 - 2014-02-26 - 2014-03-04",
  "endDate": "2014-03-04",
  "id": "2014WedW9",
  "iso": "2014WedW9",
  "periodType": Object {
    "displayName": "Weekly (Start Wednesday)",
    "getPeriods": [Function],
    "regex": /\\^\\(\\[0-9\\]\\{4\\}\\)\\(Wed\\)W\\(\\[0-9\\]\\{1,2\\}\\)\\$/,
    "type": "WeeklyWednesday",
  },
  "startDate": "2014-02-26",
  "year": 2014,
}
`;

exports[`Fixed period utilities Period id parser should parse yearly periods correctly 1`] = `
Object {
  "displayName": "2014",
  "endDate": "2014-12-31",
  "id": "2014",
  "iso": "2014",
  "periodType": Object {
    "displayName": "Yearly",
    "getPeriods": [Function],
    "regex": /\\^\\(\\[0-9\\]\\{4\\}\\)\\$/,
    "type": "Yearly",
  },
  "startDate": "2014-01-01",
  "year": 2014,
}
`;
